:root {
    --color-primary: #2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400;
    --color-headings: #1b0760;
    --color-body: #918ca4;
    --color-body-text-darker: #5c5577;
    --color-border: #ccc;
    --border-radius: 30px;
}

*, 
*::after, 
*::before {
    box-sizing: border-box;
}

/* ********** Typography ********** */

html {
    /* 62.5% of default value (16px) = 10px*/
    font-size: 62.5%;
}

body {
    /* We are using here a mobile first approach, we gonna define media query to adapt our components for larger screen */
    color: var(--color-body);
    font-family: Inter, Arial, Helvetica, sans-serif ;
    /* Mobile device are small we use larger font for our body text and links so they are more readable */
    font-size: 2.4rem;
    line-height: 1.5; /* 1.5 x the current font-size */
}

h1, h2, h3 {
    color: var(--color-headings);
    margin-bottom: 1rem;
    line-height: 1.1; /* To make the text of our headings compact */
}

h1 {
    /* 1 x font size of the html element */
    font-size: 7rem;
}

h2 {
    font-size: 4rem;
}

h3 {
    font-size: 3rem;
}

p {
    margin-top: 0;
}
/* Desktop and Laptop: 1024px is breakpoint used by many framework like bootstrap 
for laptop and desktop screens. */
@media screen and (min-width: 1024px) {
    body {
        font-size: 1.8rem;
    }

    h1{
        font-size: 8rem;
    }

    h2 {
        font-size: 4rem;
    }

    h3 {
        font-size: 2.4rem;
    }
}

/* ********** Links ********** */
a {
    text-decoration: none;
}

.link-arrow {
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight: bold;
}

.link-arrow::after {
    content: '-->';
    margin-left: 5px;
    transition: margin 0.15s;

}

.link-arrow:hover::after {
    margin-left: 10px;
}

/* We define media queries for each section, diviser pour regner; ça évite
d'avoir un media query que l'on va venir updater à chaque fois que l'on
modifie une section 

Also we don't wanna have a single place for defining the breakpoints 
because these breakpoins really depends on the component we are designing
Peut etre que pour certains component on voudra bien changer
le breakpoint pour être plus responsive*/

@media screen and (min-width: 1024px) {
    .link-arrow {
        font-size: 1.5rem;
    }
    
}

/* ********** Badges ********** */
/* 2nd principle of object oriented CSS: We should seperate structure from skin 
    So we gonna define 2 differents class
    - 1 class to give the basic structure in terms of padding and font-size
    - other class to give the element different skin: color and sizes 
*/
.badge {
    border-radius: 20px;
    font-size: 2rem;
    font-weight: 600;
    padding: 0.5rem 2rem;
    white-space: nowrap;
}

/* We use here the BEM naming convention: Modifier that changes the style of the block */
.badge--primary {
    background: var(--color-primary);
    color: white;
}

.badge--secondary {
    background: var(--color-secondary);
    color: white;
}

.badge--small {
    font-size: 1.6rem;
    padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
    .badge {
        font-size: 1.5rem;
    }

    .badge--small {
        font-size: 1.2rem;
    }
}

/* ********** Lists *********** */
.list {
    list-style: none; /* Get rid of the default bullet point  */
    padding-left: 0;/* Get rid of the padding apply by browser by default */
    color: var(--color-headings); /* Comme les list n'héritent pas l'attribut color du body on va set nous memes */
}

/* We have to distinguish inline list and vertical list which the used by default for the previous one */
.list--inline .list__item{
    display: inline-block;
    margin-right: 2rem;
}

.list--tick {
    list-style-image: url(../images/tick.svg);
    padding-left: 2rem;
    margin-bottom: 1rem;
}

.list--tick .list__item {
    padding-left: 0.5rem;
    margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
    .list--tick .list__item {
        padding-left: 0;
    }
    
}

/* ********** Icons ********** */
.icon {
    width: 40px;
    height: 40px;
}

.icon--small {
    width: 30px;
    height: 30px;
}

.icon--primary {
    fill: var(--color-primary); /* Only apply to svg element */
}

.icon--white {
    fill: white;
}

.icon-container {
    background: gold;
    width: 64px;
    height: 64px;
    border-radius: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
}

.icon-container--accent {
    background: var(--color-accent);
}

/* ********** Buttons ********** */
/* We define a button without a skin only the structure */
.btn {
    border-radius: 40px;
    border: 0;
    cursor: pointer;
    font-size: 1.8rem;
    font-weight: 600;
    margin: 1rem 0;
    outline: 0;
    padding: 2rem 3rem;
    text-align: center;
    text-transform: uppercase;
    white-space: nowrap;
}

/* If we have an icon inside a btn element size the icon this way */
.btn .icon {
    width: 2rem;
    height: 2rem;
    margin-right: 1rem;
    vertical-align: middle; /* To set the icon to the middle of the btn  */
}
/* Here we define the skin classes  */
.btn--primary {
    background: var(--color-primary);
    color: white;
}

.btn--primary:hover {
    background: #3a8ffd; /* On the color palette, tu prends la couleur de base tu translate vers les blanc pour avoir a lighter blue */
}

.btn--secondary {
    background: var(--color-secondary);
    color: white;
}

.btn--secondary:hover {
    background: #00c8eb;
}

.btn--accent {
    background: var(--color-accent); 
    color: white; 
}

.btn--accent:hover {
    background: #ec3000;
}

.btn--stretch {
    padding-left: 6rem;
    padding-right: 6rem;
}

/* Un boutton qui va occuper tout l'espace horizontale disponible */
.btn--block {
    width: 100%;
    display: inline-block;
}

.btn--outline {
    background: white;
    color: var(--color-headings);
    border: 2px solid var(--color-headings);
}

.btn--outline:hover {
    background: var(--color-headings);
    color:white;
}

@media screen and (min-width : 1024px) {
    .btn {
        font-size: 1.5rem;
    }
}

/* ********** Inputs *********** */
.input {
    padding: 1.5rem 3.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    outline: 0;
    font-size: 2rem;
    color: var(--color-headings); 
}

/* For modifying the placeholder */
::placeholder {
    color: #cdcbd7;
}

.input-group {
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    display: flex; /* We want the input item to grow and take the entire available space in the container div */
}

/* We use nesting here to target the input inside the div */
.input-group .input {
    border: 0;
    flex-grow: 1;
    padding: 1.5rem 2rem;
}

.input-group .btn {
    margin: 4px;
}

@media screen and (min-width: 1024px) {
    .input {
        font-size: 1.5rem;
    }
}

/* ********** Cards ********** */
.card {
    border-radius: 7px;
    box-shadow: 0 0 20px 10px #f3f3f3;
    overflow: hidden; /* The bg color set to  card__header element induce overflow so we have to hid it here*/
}

/* the header element cannot exist outside of this card element that's why we put __ */
/* BEM naming convention: Element that depends upon the block */
.card__header, 
.card__body {
    padding: 2rem 3rem;
}

.card--primary .card__header {
    background: var(--color-primary);
    color: white;
}

.card--secondary .card__header {
    background: var(--color-secondary);
    color: white;
}

.card--secondary .badge--secondary {
    background: #02cdf1;
}
/* ********** Plans *********** */
.plan__name {
    color: white;
    margin: 0;
    font-weight: 500;
    font-size: 2.4rem;
}

.plan__price {
    font-size: 6rem;
}

.plan__billing-cycle {
    font-size: 2.4rem;
    font-weight: 300;
    opacity: 0.8;
    margin-right: 1rem;
}

.plan__description {
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 1px;
    display: block;
}

.plan .list__item {
    margin-bottom: 2rem;
    letter-spacing: 1px;
}

.plan--popular .card__header {
    position: relative;
}

/* We are using CSS to insert image in our html markup element */
.plan--popular .card__header::before {
    content: url(../images/popular.svg);
    width: 40px;
    display: inline-block; /* so the setted width will work */
    position: absolute; /* We should make the container/parent a relatively position element */
    top: -6px;
    right: 5%;
}

@media screen and (min-width: 1024px) {
    .plan__name {
      font-size: 1.4rem;
    }
  
    .plan__price {
      font-size: 5rem;
    }
  
    .plan__billing-cycle {
      font-size: 1.6rem;
    }
  
    .plan__description {
      font-size: 1.7rem;
    }
  }

  /* ********** Media ********** */
.media {
      display: flex;
}

.media__title {
      margin-top: 0;
}

.media__body {
    margin: 0 2rem;
}
  
.media__image {
      margin-top: 1.5rem;
}

/* *********** Quote ********** */
.quote {
    font-size: 3rem;
    font-style: italic;
    color: var(--color-body-text-darker);
    line-height: 1.3;
}

.quote__text::before {
    content: open-quote;
}

.quote__text::after {
    content: close-quote;
}

.quote__author{
    font-size: 3rem;
    font-weight: 600;
    font-style: normal;
    margin-bottom: 0;
}

.quote__organization {
    color: var(--color-headings);
    font-size: 2rem;
    font-style: normal;
    opacity: 0.4;
}

.quote__line {
    position: relative;
    bottom: 10px;
}

@media screen and (min-width: 1024px) {
    .quote {
        font-size: 2rem;
    }    

    .quote__author {
        font-size: 2.4rem;
    }

    .quote__organization {
        font-size: 1.6rem;
    }
}


/* ************* Grids ************* */
.grid {
    display: grid;
}

/* 768px breakpoint used by many framework like bootstrap for tablet and others wider screen */
@media screen and (min-width: 768px) {
    .grid--1x2 {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media screen and (min-width: 1024px) {
    .grid--1x3 {
        grid-template-columns: repeat(3, 1fr);

    }
}

/* *********** Testimonial ********** */
.testmonial {
    padding: 3rem;
}

.testimonial__image {
    position: relative;
}

.testimonial__image > img  {
    width: 100%; /* To make the image responsive */
}

.testimonial__image > .icon-container {
    position: absolute; /* Nous voulons positionner l'icône à un endroit précis, et définitive */
    top: 5rem;
    right: -30px; /* On prends comme offset la moitié du diametre de l'icone */
}

@media screen and (min-width: 768px){
    .testimonial .quote, .testimonial .quote__author {
        font-size: 2.4rem;
    }

    .testimonial .quote {
        margin-left: 6rem;
    }

}

/* *********** Callouts *********** */
.callout {
    padding: 4rem;
    border-radius: 5px;
}

.callout--primary {
    background: var(--color-primary);
    color:white;
} 

.callout__heading {
    color: #fff;
    margin-top: 0;
    font-size: 3rem;
}

.callout__content {
    text-align: center;
}

.callout .btn {
    justify-self: center; /* Applied just to an item in the grid  */
    align-self: center; /* Applied just to an item in the grid  */
}

@media screen and (min-width: 768px) {
    .callout .grid--1x2 {
        grid-template-columns: 1fr auto; /* Permets d'avoir la 2ième colonne qui contient le bouton de s'agrandir autant que suffisant pour contenir que le bouton et que l'espace en surplus soit alloc à la 1ère col qui contient le texte */
    }

    .callout__content {
        text-align: left;
    }

    .callout .btn {
        margin: 0 2rem;
        justify-self: start;
    }
}


/* ************ Collapsibles ************* */
.collapsible__header {
    display: flex;
    justify-content: space-between; /* Crée un espace entre le texte header et l'icone chevron */
}

.collapsible__heading {
    margin-top: 0;
}

.collapsible__chevron {
    transform: rotate(-90deg);
}

.collapsible__content {
    max-height: 0; /*  To make diseappear the content */
    overflow: hidden;
    transition: all 0.3s; /* all to animate all properties */
    opacity: 0;
}

.collapsible--expanded .collapsible__chevron {
    transform: rotate(0);
    transition: transform 0.3s; /* The transform should happen in 0.3s */
}

.collapsible--expanded .collapsible__content {
    max-height: 100vh; /* To make visible the content using the max-height the content wont take all the viewport height but just what is needed to display its content*/
    opacity: 1;
}


/* *********** Blocks ************ */
.block {
    --padding-vertical: 6rem; /* On peut définir une variable qui ne sera accessible que dans ce element et tous ses children contrairement a celles que l'on a définit dans le root element qui sont donc accessible a tous les elements html */
    padding: var(--padding-vertical) 2rem;
}

.block__heading {
    margin-top: 0;
}

.block--dark {
    background: #000;
    color: #7b858b
}

/* In block--dark if we have a heading that heading should be in white  */
.block--dark .block__heading {
    color: #fff;
}

/* We can use a clip path generator pour découper n'importe qu'elle image de la manière que l'on veut */
.block--skewed-right {
    padding-bottom: calc(var(--padding-vertical) + 4rem ) ;
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 80%);
}

.block--skewed-left {
    padding-bottom: calc(var(--padding-vertical) + 4rem ) ;
    clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0% 100%);
}

.block__header {
    text-align: center;
}

/* On veut limiter la taille des elements à 1140px comme ça meme si l'ecran est plus grand que les elements de stretch pas pour prendre plus d'espace, cest bien pour la lecture aussi */
.container-limit-width {
    max-width: 1140px;
    margin: 0 auto; /* Pour permettre au block de tjrs se placer au milieu de l'ecran mm son container is wider, if we have extra space the space will be equally distributed to the side left and right ou this block */
}

/* *********** Navigation Bar */
.nav {
    background: #000;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    padding: 0 1rem; /* To avoid the toggler button to be so close to the edges */
    align-items: center;

}

.nav__list {
    width: 100%; /* We want to put the list in the second line of the nav */
    margin: 0;
}

.nav__item {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #222;
}

/* Eskil est possible que tu décides de remplacer le anchor element <a> un jour par un autre dans list item ? Non donc tu peux utiliser le pseudo selector */
.nav__item > a {
    color: #d2d0db;
    transition: color .3s;
}

.nav__item > a:hover {
    color: #fff;
}

.nav__toggler {
    opacity: .5;
    cursor: pointer;
    transition: box-shadow .15s;
}

/* .nav.collapsible--expanded selectionne un element qui a en mm temps les 2 class  .nav et .collapsible--expanded*/
.nav.collapsible--expanded .nav__toggler {
    opacity: 1;
    border-radius: 5px;
    box-shadow: 0 0 0 3px #666;
}

/*  To move the logo down */
.nav__brand {
    transform: translateY(5px);
}

@media screen and (min-width: 768px) {
    .nav__toggler {
        display: none; /* To make invisible and inactive the toggler button */
    }

    .nav__list {
        width: auto; /* To make the list take all necessary space */
        display: flex; /* To layout the list horizontally */
        font-size: 1.6rem; /* To reduce the list font-size */
        /* To make the list always visible */
        max-height: 100%;
        opacity: 1;
    }

    .nav__item {
        border: 0;
    }
}

/* *********** Hero *********** */
.hero {
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
}

.hero__tagline {
   font-size: 2rem;
   color: #b9c3cf;
   letter-spacing: 1px;
   margin: 2rem 0 5rem;
}

.hero__image {
    width: 100%;
}

@media screen and (min-width: 768px) {
    .hero {
        padding-top: 0;
    }

    .hero__content {
        text-align: left;
        align-self: center;
    }
}

/************ Block Domain *********** */
.block-domain .input-group {
    box-shadow: 0 0 30px 20px #e6ebee;
    border: 0;
    margin: 4rem auto;
    max-width: 670px;
}

.block-domain__prices {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 6rem);/* If we don't set this our item will be so close */
    font-size: 2rem;
    font-weight: 600;
    justify-content: center; 
    max-width: 700px;
    margin: 0 auto;
}

@media screen and (min-width: 768px) {
    .block-domain__prices {
        /* With the attribute auto-fit the grid will try to create as many columns as needed to fit all this items  */
        grid-template-columns: repeat(auto-fit, minmax(10rem,1fr)); /* We gonna divide the space into 6 fractions and give each fraction a space of 1fr */
    }
}