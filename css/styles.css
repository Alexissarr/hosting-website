:root {
    --color-primary: #2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400;
    --color-headings: #1b0760;
    --color-body: #918ca4;
    --color-border: #ccc;
    --border-radius: 30px;
}

*, 
*::after, 
*::before {
    box-sizing: border-box;
}

/* ********** Typography ********** */

html {
    /* 62.5% of default value (16px) = 10px*/
    font-size: 62.5%;
}

body {
    /* We are using here a mobile first approach, we gonna define media query to adapt our components for larger screen */
    color: var(--color-body);
    font-family: Inter, Arial, Helvetica, sans-serif ;
    /* Mobile device are small we use larger font for our body text and links so they are more readable */
    font-size: 2.4rem;
    line-height: 1.5; /* 1.5 x the current font-size */
}

h1, h2, h3 {
    color: var(--color-headings);
    margin-bottom: 1rem;
}

h1 {
    /* 1 x font size of the html element */
    font-size: 7rem;
}

h2 {
    font-size: 4rem;
}

h3 {
    font-size: 3rem;
}

p {
    margin-top: 0;
}
/* Desktop and Laptop: 1024px is breakpoint used by many framework like bootstrap 
for laptop and desktop screens. */
@media screen and (min-width: 1024px) {
    body {
        font-size: 1.8rem;
    }

    h1{
        font-size: 8rem;
    }

    h2 {
        font-size: 4rem;
    }

    h3 {
        font-size: 2.4rem;
    }
}

/* ********** Links ********** */
a {
    text-decoration: none;
}

.link-arrow {
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight: bold;
}

.link-arrow::after {
    content: '-->';
    margin-left: 5px;
    transition: margin 0.15s;

}

.link-arrow:hover::after {
    margin-left: 10px;
}

/* We define media queries for each section, diviser pour regner; ça évite
d'avoir un media query que l'on va venir updater à chaque fois que l'on
modifie une section 

Also we don't wanna have a single place for defining the breakpoints 
because these breakpoins really depends on the component we are designing
Peut etre que pour certains component on voudra bien changer
le breakpoint pour être plus responsive*/

@media screen and (min-width: 1024px) {
    .link-arrow {
        font-size: 1.5rem;
    }
    
}

/* ********** Badges ********** */
/* 2nd principle of object oriented CSS: We should seperate structure from skin 
    So we gonna define 2 differents class
    - 1 class to give the basic structure in terms of padding and font-size
    - other class to give the element different skin: color and sizes 
*/
.badge {
    border-radius: 20px;
    font-size: 2rem;
    font-weight: 600;
    padding: 0.5rem 2rem;
    white-space: nowrap;
}

/* We use here the BEM naming convention: Modifier that changes the style of the block */
.badge--primary {
    background: var(--color-primary);
    color: white;
}

.badge--secondary {
    background: var(--color-secondary);
    color: white;
}

.badge--small {
    font-size: 1.6rem;
    padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
    .badge {
        font-size: 1.5rem;
    }

    .badge--small {
        font-size: 1.2rem;
    }
}

/* ********** Lists *********** */
.list {
    list-style: none; /* Get rid of the default bullet point  */
    padding-left: 0;/* Get rid of the padding apply by browser by default */
    color: var(--color-headings); /* Comme les list n'héritent pas l'attribut color du body on va set nous memes */
}

/* We have to distinguish inline list and vertical list which the used by default for the previous one */
.list--inline .list__item{
    display: inline-block;
    margin-right: 2rem;
}

.list--tick {
    list-style-image: url(../images/tick.svg);
    padding-left: 2rem;
    margin-bottom: 1rem;
}

.list--tick .list__item {
    padding-left: 0.5rem;
    margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
    .list--tick .list__item {
        padding-left: 0;
    }
    
}

/* ********** Icons ********** */
.icon {
    width: 40px;
    height: 40px;
}

.icon--primary {
    fill: var(--color-primary); /* Only apply to svg element */
}

.icon-container {
    background: gold;
    width: 64px;
    height: 64px;
    border-radius: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
}

/* ********** Buttons ********** */
/* We define a button without a skin only the structure */
.btn {
    border-radius: 40px;
    border: 0;
    cursor: pointer;
    font-size: 1.8rem;
    font-weight: 600;
    padding: 2rem 3rem;
    text-transform: uppercase;
    white-space: nowrap;
    text-align: center;
    margin: 1rem 0;
}

/* Here we define the skin classes  */
.btn--primary {
    background: var(--color-primary);
    color: white;
}

.btn--primary:hover {
    background: #3a8ffd; /* On the color palette, tu prends la couleur de base tu translate vers les blanc pour avoir a lighter blue */
}

.btn--secondary {
    background: var(--color-secondary);
    color: white;
}

.btn--secondary:hover {
    background: #00c8eb;
}

.btn--accent {
    background: var(--color-accent); 
    color: white; 
}

.btn--accent:hover {
    background: #ec3000;
}

/* Un boutton qui va occuper tout l'espace horizontale disponible */
.btn--block {
    width: 100%;
    display: inline-block;
}

.btn--outline {
    background: white;
    color: var(--color-headings);
    border: 2px solid var(--color-headings);
}

.btn--outline:hover {
    background: var(--color-headings);
    color:white;
}

@media screen and (min-width : 1024px) {
    .btn {
        font-size: 1.5rem;
    }
}

/* ********** Inputs *********** */
.input {
    padding: 1.5rem 3.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    outline: 0;
    font-size: 2rem;
    color: var(--color-headings); 
}

/* For modifying the placeholder */
::placeholder {
    color: #cdcbd7;
}

.input-group {
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    display: flex; /* We want the input item to grow and take the entire available space in the container div */
}

/* We use nesting here to target the input inside the div */
.input-group .input {
    border: 0;
    flex-grow: 1;
    padding: 1.5rem 1rem;
}

.input-group .btn {
    margin: 4px;
}

@media screen and (min-width: 1024px) {
    .input {
        font-size: 1.5rem;
    }
}

/* ********** Cards ********** */
.card {
    border-radius: 7px;
    box-shadow: 0 0 20px 10px #f3f3f3;
    overflow: hidden; /* The bg color set to  card__header element induce overflow so we have to hid it here*/
}

/* the header element cannot exist outside of this card element that's why we put __ */
/* BEM naming convention: Element that depends upon the block */
.card__header, 
.card__body {
    padding: 2rem 3rem;
}

.card--primary .card__header {
    background: var(--color-primary);
    color: white;
}

.card--secondary .card__header {
    background: var(--color-secondary);
    color: white;
}

.card--secondary .badge--secondary {
    background: #02cdf1;
}
/* ********** Plans *********** */
.plan__name {
    color: white;
    margin: 0;
    font-weight: 500;
    font-size: 2.4rem;
}

.plan__price {
    font-size: 6rem;
}

.plan__billing-cycle {
    font-size: 2.4rem;
    font-weight: 300;
    opacity: 0.8;
    margin-right: 1rem;
}

.plan__description {
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 1px;
    display: block;
}

.plan .list__item {
    margin-bottom: 2rem;
    letter-spacing: 1px;
}

.plan--popular .card__header {
    position: relative;
}

/* We are using CSS to insert image in our html markup element */
.plan--popular .card__header::before {
    content: url(../images/popular.svg);
    width: 40px;
    display: inline-block; /* so the setted width will work */
    position: absolute; /* We should make the container/parent a relatively position element */
    top: -6px;
    right: 5%;
}

@media screen and (min-width: 1024px) {
    .plan__name {
      font-size: 1.4rem;
    }
  
    .plan__price {
      font-size: 5rem;
    }
  
    .plan__billing-cycle {
      font-size: 1.6rem;
    }
  
    .plan__description {
      font-size: 1.7rem;
    }
  }